// Code generated by endogen; DO NOT EDIT.

package db

import (
	"context"
	"database/sql"

	"github.com/semrekkers/endo/pkg/endo"
)

const (
	querySelectEffectiveRole    = `SELECT role_id, role_name FROM effective_roles `
	queryReturningEffectiveRole = ` RETURNING role_id, role_name`
)

// GetEffectiveRole finds the EffectiveRole identified by the given key.
func (s *Store) GetEffectiveRole(ctx context.Context, key int) (*EffectiveRole, error) {
	const query = querySelectEffectiveRole + "WHERE user_id = $1"

	var e EffectiveRole
	err := s.tx(ctx, endo.TxReadOnly, func(dbtx endo.DBTX) error {
		row := dbtx.QueryRowContext(ctx, query, key)
		return scanEffectiveRole(&e, row)
	})
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// GetEffectiveRoleByField finds the EffectiveRole where field equals v.
// Please be aware that field is not protected against SQL injection attacks.
func (s *Store) GetEffectiveRoleByField(ctx context.Context, field string, v interface{}) (*EffectiveRole, error) {
	var qb endo.Builder
	query := qb.
		Write(querySelectEffectiveRole).
		Writef("WHERE %s = $1", field).
		String()

	var e EffectiveRole
	err := s.tx(ctx, endo.TxReadOnly, func(dbtx endo.DBTX) error {
		row := dbtx.QueryRowContext(ctx, query, v)
		return scanEffectiveRole(&e, row)
	})
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// GetEffectiveRoles gets all EffectiveRoles from the database.
func (s *Store) GetEffectiveRoles(ctx context.Context, po endo.PageOptions) ([]*EffectiveRole, error) {
	const query = querySelectEffectiveRole + "ORDER BY user_id, role_id " + "LIMIT $1 OFFSET $2"
	limit, offset := po.Args()

	var c []*EffectiveRole
	err := s.tx(ctx, endo.TxReadOnly, func(dbtx endo.DBTX) error {
		rows, err := dbtx.QueryContext(ctx, query, limit, offset)
		if err != nil {
			return err
		}
		defer rows.Close()
		c, err = scanEffectiveRoleRows(rows)
		return err
	})
	if err != nil {
		return nil, err
	}

	return c, nil
}

func scanEffectiveRole(e *EffectiveRole, s endo.Scanner) error {
	return s.Scan(
		&e.RoleID,
		&e.RoleName,
	)
}

func scanEffectiveRoleRows(rows *sql.Rows) ([]*EffectiveRole, error) {
	var c []*EffectiveRole
	for rows.Next() {
		var e EffectiveRole
		if err := scanEffectiveRole(&e, rows); err != nil {
			return nil, err
		}
		c = append(c, &e)
	}
	return c, nil
}
